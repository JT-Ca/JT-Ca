
Main File:

FP.py

This Python script is the main file to be run, like an exe, but this was made by a beginner so it’s a start! 
This program gives a basic user interface, a list of the tools, and how to use the program. 
This tool is able to call each of the other Python scripts used (Tools #1 - 9), and they are also able to call it. 
Three of the nine program in this tool are located in a different directory and they are able to be called as well 
call this file. You will notice that Tools 1, 3, and 4 will have the line ‘sys.path.insert(0, '<tool-name.py')’, 
which is used to call the Python script in the other directory.

This again is the main .py file that should be ran to call the other files. When usung the command ‘sudo python3 FP.py’ 
the program will start, print a loading screen, welcome the user, a list of all available tools (#1 – 9), and directions 
to navigate the tool with example. It then allows the user to input an integer to select a tool. In this case we tested 
the quit function so I typed 0. It then prompts if they are sure and I typed n for no, which restarts the program. 
I did the same thing again and then typed y for yes and it quits. If the input is invalid, it tells the user and makes 
them try again until the input is valid. This program calls all tools in a continues stream EXCEPT for Tool #9 as it 
will not stop on its own. 
--------------------------------

Tool #1 - PDF Metadata Collector

PDFMetadata.py

The first tool of this tool is a PDF Metadata Collector. It finds any metadata in the PDF (creation date, author, etc.) and 
prints it to the user. This sub-tool can be used to gather data on a target, also known as reconnaissance. This is the 
process of gathering data on a target you are planning to attack. This is the first step in the Cyber Attack Chain. 
This tool is in a different folder then the main Python file, FP.py, and is called by the line ‘sys.path.insert(0, 'FinProj')’.
--------------------------------

Tool #2 - Raw HTML Webpage Grabber

HTMLGrabber.py

The second tool of my Python Program is an HTML Grabber. This uses Mechanize to brown the internet 
anonymously and grabs the raw webpage. This is a series of links in a string format. 
This is done also to preform reconnaissance on a target to gather domain names and find vulnerabilities.
--------------------------------

Tool #3 - Cookie Grabber

Cookies-py/CCook.py
Cookies-py/hideB.py

The third tool on the list is a Cookie Grabber, which again uses Mechanize. This will gather 5 unique cookies from a webpage 
if the webpage allows it. An example is when using twitter as a target too many times and an error occurs (bad request) the 
program will just close. Other than that, this program seems to work perfectly. This tool is also used for reconnaissance. 
The first Python file, CCook.py, is the main file that is called by FP.py but also calls the second file hideB.py. 
The second Python script is what opens the mechanize browser, provides anonymity, changes the users proxy and user agent, 
as well clears, and collects the cookies. This tool is in a different folder then the main Python file, FP.py, and is called by the 
line ‘sys.path.insert(0, 'FinProj')’. CCook.py uses hideB.py, opens mechanize, goes to the user inputted page, and prints the output 
to the user each time a cookie is collected after its cleared. 
--------------------------------

Tool #4 - HREF Link Parser

ParsLink-py/ParL.py
ParsLink-py/hideB2.py


The fourth tool in my hacking tool is a Link Parser. This tool gathers the links found on a webpage that are ‘href’ links, collects 
them, and prints them to the user using BeautifulSoup4. There is a Regex option, but this is not set up to work properly. 
This tool is again a reconnaissance tool that is used to gather domain names from a target. The first file, ParL.py, is what is 
called by FP.py and again vice versa. Again, this tool uses mechanize, but also uses hideB.py renamed as hideB2.py. 
This is done to make my life a little easier when I was coding this. The second file has the same function as the original one hideB.py. 
This tool is in a different folder then the main Python file, FP.py, and is called by the line ‘sys.path.insert(0, 'FinProj')’.
--------------------------------

Tool #5 - NMap Port Scanner

nmapPortScan.py

The fifth tool in my Python program is an Nmap Port Scanner. This tool uses Nmap to scan a targets network to find open ports that could 
hold a vulnerability to attack. This tool again is a reconnaissance tool used to gather data, in this case, ports that are open. 
The target for this tool was my Metasploitable2 Linux VM. 
--------------------------------

Tool #6 - Intrusion Detection System [IDS] Tricker

idsTrick.py

The sixth utility on my hacking tool is an Intrusion Detection System Tricker. This tool sends spoofed packets specifically designed to 
confuse Network Analysists that may be over-seeing network activity. It sends packets with different data like ‘1234’, ‘LEMME MESS WITH YOU!’, etc. 
This is more malicious than reconnaissance as it is actually attacking a target so, please be careful and respectful with this tool. 
The target for this tool was Snort running on my Ubuntu 20.04 VM. 
--------------------------------

Tool #7 - TCP Sequence Calculator

TCPCalc.py

The seventh tool is a TCP Packet Calculator. This targets TCP’s three-way handshake ACK. It calculates the distance between successful communication between 
the TCP and ACK packets. It does this by calculating the difference between the two sequence numbers and gives the user the next upcoming sequence number. 
This could be used as a reconnaissance tool to see if the port is secure, like a ping test. 
--------------------------------

Tool #8 - SYN Packet Flooder

SYNFlood.py

The eighth tool is a SYN Packet Flooder. This targets TCP’s three-way handshake, and floods it with packets. This is a Denial-of-Service Attack (DDoS), 
which is malicious so this is a tool that can actually be used to attack a target. Again, please be careful and respectful with this tool! 
The target for this tool was again the Metasploitable 2 VM.
--------------------------------

Tool #9 - TTL Packet Parser

ParseTTL.py

The ninth and final tool in my hacking tool (for now) is a TTL Packet Parser. This tool is very buggy and will not stop unless the user uses 
the keyboard shortcut ‘Ctrl’ + ‘z’. I have tried to make it have a stop function, but this does not work, both the count and time methods failed. 
As well, this program froze my VM many times, so be careful when testing this tool! This tool gathers packets picked up while browsing the 
internet on your PC. If the packet is spoofed it is also printed. This is a reconnaissance tool as it can be used to gather and monitor packet 
flow on a targets internet.

***YOU MUST BE CONNECTED TO THE TARGETS NETWORK FOR THIS TO WORK***
--------------------------------

Tool #10 - Anonymous FTP Scanner

FTPScan.py


--------------------------------
Tool #11 - Brute Force FTP Credentials

FTPBF.py


--------------------------------
Tool #12 - FTP Server Webpage Search

FTPWP.py


--------------------------------

THANK YOU FOR USING MY HACKING TOOL!! BE RESPONSIBLE AND SAFE!! HACK WISELY!!












